{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Check out the installation guide to get your deployment up and running Or the Docker image (coming soon...)","title":"Introduction"},{"location":"#getting-started","text":"Check out the installation guide to get your deployment up and running Or the Docker image (coming soon...)","title":"Getting Started"},{"location":"installation/","text":"Installation Check out the following sections for installing Status-Page: PostgreSQL database Redis Status-Page Gunicorn HTTP server Requirements Dependency Minimum Version Optional Python 3.10 no PostgreSQL 10 no Redis 4.0 no SMTP Mail Server --- yes Upgrading If you are upgrading an existing Installation, please head over to the upgrading guide","title":"Install Status-Page"},{"location":"installation/#installation","text":"Check out the following sections for installing Status-Page: PostgreSQL database Redis Status-Page Gunicorn HTTP server","title":"Installation"},{"location":"installation/#requirements","text":"Dependency Minimum Version Optional Python 3.10 no PostgreSQL 10 no Redis 4.0 no SMTP Mail Server --- yes","title":"Requirements"},{"location":"installation/#upgrading","text":"If you are upgrading an existing Installation, please head over to the upgrading guide","title":"Upgrading"},{"location":"installation/1-postgresql/","text":"PostgreSQL Installation If you already have a PostgreSQL database set up, skip to the next section . PostgreSQL 10 or later required Status-Page requires PostgreSQL 10 or later. Please note that other relational databases are not supported. Installation Ubuntu CentOS sudo apt update sudo apt install -y postgresql sudo yum install -y postgresql-server sudo postgresql-setup --initdb CentOS configures ident host-based authentication for PostgreSQL by default. Because Status-Page will need to authenticate using a username and password, modify /var/lib/pgsql/data/pg_hba.conf to support MD5 authentication by changing ident to md5 for the lines below: host all all 127.0.0.1/32 md5 host all all ::1/128 md5 Once PostgreSQL has been installed, start the service and enable it to run at boot: sudo systemctl start postgresql sudo systemctl enable postgresql Before continuing, verify that you have installed PostgreSQL 10 or later: psql -V Database Creation At a minimum, we need to create a database for Status-Page and assign it a username and password for authentication. Start by invoking the PostgreSQL shell as the system Postgres user. sudo -u postgres psql Within the shell, enter the following commands to create the database and user (role), substituting your own value for the password: CREATE DATABASE statuspage ; CREATE USER statuspage WITH PASSWORD 'abcdefgh123456' ; GRANT ALL PRIVILEGES ON DATABASE statuspage TO statuspage ; Use a strong password Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your Status-Page installation. Once complete, enter \\q to exit the PostgreSQL shell.","title":"1. PostgreSQL"},{"location":"installation/1-postgresql/#postgresql-installation","text":"If you already have a PostgreSQL database set up, skip to the next section . PostgreSQL 10 or later required Status-Page requires PostgreSQL 10 or later. Please note that other relational databases are not supported.","title":"PostgreSQL Installation"},{"location":"installation/1-postgresql/#installation","text":"Ubuntu CentOS sudo apt update sudo apt install -y postgresql sudo yum install -y postgresql-server sudo postgresql-setup --initdb CentOS configures ident host-based authentication for PostgreSQL by default. Because Status-Page will need to authenticate using a username and password, modify /var/lib/pgsql/data/pg_hba.conf to support MD5 authentication by changing ident to md5 for the lines below: host all all 127.0.0.1/32 md5 host all all ::1/128 md5 Once PostgreSQL has been installed, start the service and enable it to run at boot: sudo systemctl start postgresql sudo systemctl enable postgresql Before continuing, verify that you have installed PostgreSQL 10 or later: psql -V","title":"Installation"},{"location":"installation/1-postgresql/#database-creation","text":"At a minimum, we need to create a database for Status-Page and assign it a username and password for authentication. Start by invoking the PostgreSQL shell as the system Postgres user. sudo -u postgres psql Within the shell, enter the following commands to create the database and user (role), substituting your own value for the password: CREATE DATABASE statuspage ; CREATE USER statuspage WITH PASSWORD 'abcdefgh123456' ; GRANT ALL PRIVILEGES ON DATABASE statuspage TO statuspage ; Use a strong password Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your Status-Page installation. Once complete, enter \\q to exit the PostgreSQL shell.","title":"Database Creation"},{"location":"installation/2-redis/","text":"Redis Installation Install Redis Redis is an in-memory key-value store which Status-Page employs for queuing. This section entails the installation and configuration of a local Redis instance. If you already have a Redis service in place, skip to the next section . Redis v4.0 or later required Status-Page requires Redis v4.0 or higher. If your distribution does not offer a recent enough release, you will need to build Redis from source. Please see the Redis installation documentation for further details. Ubuntu CentOS sudo apt install -y redis-server sudo yum install -y redis sudo systemctl start redis sudo systemctl enable redis Before continuing, verify that your installed version of Redis is at least v4.0: redis-server -v You may wish to modify the Redis configuration at /etc/redis.conf or /etc/redis/redis.conf , however in most cases the default configuration is sufficient.","title":"2. Redis"},{"location":"installation/2-redis/#redis-installation","text":"","title":"Redis Installation"},{"location":"installation/2-redis/#install-redis","text":"Redis is an in-memory key-value store which Status-Page employs for queuing. This section entails the installation and configuration of a local Redis instance. If you already have a Redis service in place, skip to the next section . Redis v4.0 or later required Status-Page requires Redis v4.0 or higher. If your distribution does not offer a recent enough release, you will need to build Redis from source. Please see the Redis installation documentation for further details. Ubuntu CentOS sudo apt install -y redis-server sudo yum install -y redis sudo systemctl start redis sudo systemctl enable redis Before continuing, verify that your installed version of Redis is at least v4.0: redis-server -v You may wish to modify the Redis configuration at /etc/redis.conf or /etc/redis/redis.conf , however in most cases the default configuration is sufficient.","title":"Install Redis"},{"location":"installation/3-status-page/","text":"Status-Page Installation Install System Packages Begin by installing all system packages required by Status-Page and its dependencies. Python 3.10 or later required Status-Page requires Python 3.10 or later. Ubuntu CentOS sudo apt install -y python3 python3-pip python3-venv python3-dev build-essential libxml2-dev libxslt1-dev libffi-dev libpq-dev libssl-dev zlib1g-dev sudo yum install -y gcc libxml2-devel libxslt-devel libffi-devel libpq-devel openssl-devel redhat-rpm-config Before continuing, check that your installed Python version is at least 3.10: python3 -V Download Status-Page Create the base directory for the installation. We'll use /opt/status-page for now. sudo mkdir -p /opt/status-page/ cd /opt/status-page/ If git is not already installed, install it: Ubuntu CentOS sudo apt install -y git sudo yum install -y git Next, clone the Status-Page GitHub repository into the current directory. (Note that this will always pull the main branch, which may be unstable) sudo git clone https://github.com/status-page/status-page.git . The git clone command should generate output similar to the following: Cloning into '.'... remote: Enumerating objects: 426, done. remote: Counting objects: 100% (426/426), done. remote: Compressing objects: 100% (361/361), done. remote: Total 426 (delta 49), reused 366 (delta 43), pack-reused 0 Receiving objects: 100% (426/426), 2.68 MiB | 9.44 MiB/s, done. Resolving deltas: 100% (49/49), done. You now need to select a version, which you want to run. Type the following command, to check out the latest release. sudo git checkout $(git describe --tags `git rev-list --tags --max-count=1`) Note To check out a specific release , use the git checkout command with the desired release tag. For example, git checkout v2.0.0 . Create the Status-Page System User Create a system user account named status-page . We'll configure the WSGI and HTTP services to run under this account. Ubuntu CentOS sudo adduser --system --group status-page sudo groupadd --system status-page sudo adduser --system -g status-page status-page Configuration Move into the Status-Page configuration directory and make a copy of configuration_example.py named configuration.py . This file will hold all of your local configuration parameters. cd /opt/status-page/statuspage/statuspage/ sudo cp configuration_example.py configuration.py Open configuration.py with your preferred editor to begin configuring Status-Page. Status-Page offers many configuration parameters, but only the following four are required for new installations: ALLOWED_HOSTS DATABASE REDIS SECRET_KEY ALLOWED_HOSTS This is a list of the valid hostnames and IP addresses by which this server can be reached. You must specify at least one name or IP address. (Note that this does not restrict the locations from which Status-Page may be accessed: It is merely for HTTP host header validation .) ALLOWED_HOSTS = [ 'status-page.example.com' , '192.0.2.123' ] If you are not yet sure what the domain name and/or IP address of the Status-Page installation will be, you can set this to a wildcard (asterisk) to allow all host values: ALLOWED_HOSTS = [ '*' ] DATABASE This parameter holds the database configuration details. You must define the username and password used when you configured PostgreSQL. If the service is running on a remote host, update the HOST and PORT parameters accordingly. See the configuration documentation for more detail on individual parameters. DATABASE = { 'NAME' : 'status-page' , # Database name 'USER' : 'status-page' , # PostgreSQL username 'PASSWORD' : 'abcdefgh123456' , # PostgreSQL password 'HOST' : 'localhost' , # Database server 'PORT' : '' , # Database port (leave blank for default) 'CONN_MAX_AGE' : 300 , # Max database connection age (seconds) } REDIS Redis is a in-memory key-value store used by Status-Page for caching and background task queuing. Redis typically requires minimal configuration; the values below should suffice for most installations. See the configuration documentation for more detail on individual parameters. Note that Status-Page requires the specification of two separate Redis databases: tasks and caching . These may both be provided by the same Redis service, however each should have a unique numeric database ID. REDIS = { 'tasks' : { 'HOST' : 'localhost' , # Redis server 'PORT' : 6379 , # Redis port 'PASSWORD' : '' , # Redis password (optional) 'DATABASE' : 0 , # Database ID 'SSL' : False , # Use SSL (optional) }, 'caching' : { 'HOST' : 'localhost' , 'PORT' : 6379 , 'PASSWORD' : '' , 'DATABASE' : 1 , # Unique ID for second database 'SSL' : False , } } SECRET_KEY This parameter must be assigned a randomly-generated key employed as a salt for hashing and related cryptographic functions. (Note, however, that it is never directly used in the encryption of secret data.) This key must be unique to this installation and is recommended to be at least 50 characters long. It should not be shared outside the local system. A simple Python script named generate_secret_key.py is provided in the parent directory to assist in generating a suitable key: python3 ../generate_secret_key.py SECRET_KEY values must match In the case of a highly available installation with multiple web servers, SECRET_KEY must be identical among all servers in order to maintain a persistent user session state. When you have finished modifying the configuration, remember to save the file. Optional Requirements All Python packages required by Status-Page are listed in requirements.txt and will be installed automatically. Status-Page also supports some optional packages. If desired, these packages must be listed in local_requirements.txt within the Status-Page root directory. Run the Installation and Upgrade Script Once Status-Page has been configured, we're ready to proceed with the actual installation. We'll run the packaged upgrade script ( upgrade.sh ) to perform the following actions: Create a Python virtual environment Installs all required Python packages Run database schema migrations Builds the documentation locally (for offline use) Aggregate static resource files on disk sudo /opt/status-page/upgrade.sh Note that Python 3.10 or later is required for Status-Page v2.0 and later releases. If the default Python installation on your server is set to a lesser version, pass the path to the supported installation as an environment variable named PYTHON . (Note that the environment variable must be passed after the sudo command.) sudo PYTHON=/usr/bin/python3.10 /opt/status-page/upgrade.sh Note Upon completion, the upgrade script may warn that no existing virtual environment was detected. As this is a new installation, this warning can be safely ignored. Create a Super User Status-Page does not come with any predefined user accounts. You'll need to create a super user (administrative account) to be able to log into Status-Page. First, enter the Python virtual environment created by the upgrade script: source /opt/status-page/venv/bin/activate Once the virtual environment has been activated, you should notice the string (venv) prepended to your console prompt. Next, we'll create a superuser account using the createsuperuser Django management command (via manage.py ). Specifying an email address for the user is not required, but be sure to use a very strong password. cd /opt/status-page/statuspage python3 manage.py createsuperuser Test the Application At this point, we should be able to run Status-Page's development server for testing. We can check by starting a development instance: python3 manage.py runserver 0.0.0.0:8000 --insecure If successful, you should see output similar to the following: Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). August 30, 2021 - 18:02:23 Django version 3.2.6, using settings 'statuspage.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. Next, connect to the name or IP of the server (as defined in ALLOWED_HOSTS ) on port 8000; for example, http://127.0.0.1:8000/dashboard/ . You should be greeted with the Status-Page login page. Try logging in using the username and password specified when creating a superuser. Note By default RHEL based distros will likely block your testing attempts with firewalld. The development server port can be opened with firewall-cmd (add --permanent if you want the rule to survive server restarts): firewall-cmd --zone=public --add-port=8000/tcp Not for production use The development server is for development and testing purposes only. It is neither performant nor secure enough for production use. Do not use it in production. Warning If the test service does not run, or you cannot reach the Status-Page home page, something has gone wrong. Do not proceed with the rest of this guide until the installation has been corrected. Type Ctrl+c to stop the development server.","title":"3. Status-Page"},{"location":"installation/3-status-page/#status-page-installation","text":"","title":"Status-Page Installation"},{"location":"installation/3-status-page/#install-system-packages","text":"Begin by installing all system packages required by Status-Page and its dependencies. Python 3.10 or later required Status-Page requires Python 3.10 or later. Ubuntu CentOS sudo apt install -y python3 python3-pip python3-venv python3-dev build-essential libxml2-dev libxslt1-dev libffi-dev libpq-dev libssl-dev zlib1g-dev sudo yum install -y gcc libxml2-devel libxslt-devel libffi-devel libpq-devel openssl-devel redhat-rpm-config Before continuing, check that your installed Python version is at least 3.10: python3 -V","title":"Install System Packages"},{"location":"installation/3-status-page/#download-status-page","text":"Create the base directory for the installation. We'll use /opt/status-page for now. sudo mkdir -p /opt/status-page/ cd /opt/status-page/ If git is not already installed, install it: Ubuntu CentOS sudo apt install -y git sudo yum install -y git Next, clone the Status-Page GitHub repository into the current directory. (Note that this will always pull the main branch, which may be unstable) sudo git clone https://github.com/status-page/status-page.git . The git clone command should generate output similar to the following: Cloning into '.'... remote: Enumerating objects: 426, done. remote: Counting objects: 100% (426/426), done. remote: Compressing objects: 100% (361/361), done. remote: Total 426 (delta 49), reused 366 (delta 43), pack-reused 0 Receiving objects: 100% (426/426), 2.68 MiB | 9.44 MiB/s, done. Resolving deltas: 100% (49/49), done. You now need to select a version, which you want to run. Type the following command, to check out the latest release. sudo git checkout $(git describe --tags `git rev-list --tags --max-count=1`) Note To check out a specific release , use the git checkout command with the desired release tag. For example, git checkout v2.0.0 .","title":"Download Status-Page"},{"location":"installation/3-status-page/#create-the-status-page-system-user","text":"Create a system user account named status-page . We'll configure the WSGI and HTTP services to run under this account. Ubuntu CentOS sudo adduser --system --group status-page sudo groupadd --system status-page sudo adduser --system -g status-page status-page","title":"Create the Status-Page System User"},{"location":"installation/3-status-page/#configuration","text":"Move into the Status-Page configuration directory and make a copy of configuration_example.py named configuration.py . This file will hold all of your local configuration parameters. cd /opt/status-page/statuspage/statuspage/ sudo cp configuration_example.py configuration.py Open configuration.py with your preferred editor to begin configuring Status-Page. Status-Page offers many configuration parameters, but only the following four are required for new installations: ALLOWED_HOSTS DATABASE REDIS SECRET_KEY","title":"Configuration"},{"location":"installation/3-status-page/#allowed_hosts","text":"This is a list of the valid hostnames and IP addresses by which this server can be reached. You must specify at least one name or IP address. (Note that this does not restrict the locations from which Status-Page may be accessed: It is merely for HTTP host header validation .) ALLOWED_HOSTS = [ 'status-page.example.com' , '192.0.2.123' ] If you are not yet sure what the domain name and/or IP address of the Status-Page installation will be, you can set this to a wildcard (asterisk) to allow all host values: ALLOWED_HOSTS = [ '*' ]","title":"ALLOWED_HOSTS"},{"location":"installation/3-status-page/#database","text":"This parameter holds the database configuration details. You must define the username and password used when you configured PostgreSQL. If the service is running on a remote host, update the HOST and PORT parameters accordingly. See the configuration documentation for more detail on individual parameters. DATABASE = { 'NAME' : 'status-page' , # Database name 'USER' : 'status-page' , # PostgreSQL username 'PASSWORD' : 'abcdefgh123456' , # PostgreSQL password 'HOST' : 'localhost' , # Database server 'PORT' : '' , # Database port (leave blank for default) 'CONN_MAX_AGE' : 300 , # Max database connection age (seconds) }","title":"DATABASE"},{"location":"installation/3-status-page/#redis","text":"Redis is a in-memory key-value store used by Status-Page for caching and background task queuing. Redis typically requires minimal configuration; the values below should suffice for most installations. See the configuration documentation for more detail on individual parameters. Note that Status-Page requires the specification of two separate Redis databases: tasks and caching . These may both be provided by the same Redis service, however each should have a unique numeric database ID. REDIS = { 'tasks' : { 'HOST' : 'localhost' , # Redis server 'PORT' : 6379 , # Redis port 'PASSWORD' : '' , # Redis password (optional) 'DATABASE' : 0 , # Database ID 'SSL' : False , # Use SSL (optional) }, 'caching' : { 'HOST' : 'localhost' , 'PORT' : 6379 , 'PASSWORD' : '' , 'DATABASE' : 1 , # Unique ID for second database 'SSL' : False , } }","title":"REDIS"},{"location":"installation/3-status-page/#secret_key","text":"This parameter must be assigned a randomly-generated key employed as a salt for hashing and related cryptographic functions. (Note, however, that it is never directly used in the encryption of secret data.) This key must be unique to this installation and is recommended to be at least 50 characters long. It should not be shared outside the local system. A simple Python script named generate_secret_key.py is provided in the parent directory to assist in generating a suitable key: python3 ../generate_secret_key.py SECRET_KEY values must match In the case of a highly available installation with multiple web servers, SECRET_KEY must be identical among all servers in order to maintain a persistent user session state. When you have finished modifying the configuration, remember to save the file.","title":"SECRET_KEY"},{"location":"installation/3-status-page/#optional-requirements","text":"All Python packages required by Status-Page are listed in requirements.txt and will be installed automatically. Status-Page also supports some optional packages. If desired, these packages must be listed in local_requirements.txt within the Status-Page root directory.","title":"Optional Requirements"},{"location":"installation/3-status-page/#run-the-installation-and-upgrade-script","text":"Once Status-Page has been configured, we're ready to proceed with the actual installation. We'll run the packaged upgrade script ( upgrade.sh ) to perform the following actions: Create a Python virtual environment Installs all required Python packages Run database schema migrations Builds the documentation locally (for offline use) Aggregate static resource files on disk sudo /opt/status-page/upgrade.sh Note that Python 3.10 or later is required for Status-Page v2.0 and later releases. If the default Python installation on your server is set to a lesser version, pass the path to the supported installation as an environment variable named PYTHON . (Note that the environment variable must be passed after the sudo command.) sudo PYTHON=/usr/bin/python3.10 /opt/status-page/upgrade.sh Note Upon completion, the upgrade script may warn that no existing virtual environment was detected. As this is a new installation, this warning can be safely ignored.","title":"Run the Installation and Upgrade Script"},{"location":"installation/3-status-page/#create-a-super-user","text":"Status-Page does not come with any predefined user accounts. You'll need to create a super user (administrative account) to be able to log into Status-Page. First, enter the Python virtual environment created by the upgrade script: source /opt/status-page/venv/bin/activate Once the virtual environment has been activated, you should notice the string (venv) prepended to your console prompt. Next, we'll create a superuser account using the createsuperuser Django management command (via manage.py ). Specifying an email address for the user is not required, but be sure to use a very strong password. cd /opt/status-page/statuspage python3 manage.py createsuperuser","title":"Create a Super User"},{"location":"installation/3-status-page/#test-the-application","text":"At this point, we should be able to run Status-Page's development server for testing. We can check by starting a development instance: python3 manage.py runserver 0.0.0.0:8000 --insecure If successful, you should see output similar to the following: Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). August 30, 2021 - 18:02:23 Django version 3.2.6, using settings 'statuspage.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. Next, connect to the name or IP of the server (as defined in ALLOWED_HOSTS ) on port 8000; for example, http://127.0.0.1:8000/dashboard/ . You should be greeted with the Status-Page login page. Try logging in using the username and password specified when creating a superuser. Note By default RHEL based distros will likely block your testing attempts with firewalld. The development server port can be opened with firewall-cmd (add --permanent if you want the rule to survive server restarts): firewall-cmd --zone=public --add-port=8000/tcp Not for production use The development server is for development and testing purposes only. It is neither performant nor secure enough for production use. Do not use it in production. Warning If the test service does not run, or you cannot reach the Status-Page home page, something has gone wrong. Do not proceed with the rest of this guide until the installation has been corrected. Type Ctrl+c to stop the development server.","title":"Test the Application"},{"location":"installation/4-gunicorn/","text":"Gunicorn Like most Django applications, Status-Page runs as a WSGI application behind an HTTP server. This documentation shows how to install and configure gunicorn (which is automatically installed with Status-Page) for this role, however other WSGI servers are available and should work similarly well. Configuration Status-Page ships with a default configuration file for gunicorn. To use it, copy /opt/status-page/contrib/gunicorn.py to /opt/status-page/gunicorn.py . (We make a copy of this file rather than pointing to it directly to ensure that any local changes to it do not get overwritten by a future upgrade.) sudo cp /opt/status-page/contrib/gunicorn.py /opt/status-page/gunicorn.py While the provided configuration should suffice for most initial installations, you may wish to edit this file to change the bound IP address and/or port number, or to make performance-related adjustments. See the Gunicorn documentation for the available configuration parameters. systemd Setup We'll use systemd to control gunicorn, Status-Page's background worker scheduler and Status-Page's background worker process. First, copy contrib/status-page.service , contrib/status-page-scheduler.service and contrib/status-page-rq.service to the /etc/systemd/system/ directory and reload the systemd daemon: sudo cp -v /opt/status-page/contrib/*.service /etc/systemd/system/ sudo systemctl daemon-reload Then, start the status-page , status-page-scheduler and status-page-rq services and enable them to initiate at boot time: sudo systemctl start status-page status-page-scheduler status-page-rq sudo systemctl enable status-page status-page-scheduler status-page-rq You can use the command systemctl status status-page to verify that the WSGI service is running: systemctl status status-page.service You should see output similar to the following: \u25cf status-page.service - Status-Page WSGI Service Loaded: loaded (/etc/systemd/system/status-page.service; enabled; vendor preset: enabled) Active: active (running) since Mon 2022-10-30 17:54:22 UTC; 14h ago Docs: https://docs.status-page.dev/ Main PID: 1573 (gunicorn) Tasks: 19 (limit: 4683) Memory: 666.2M CGroup: /system.slice/status-page.service \u251c\u25001573 /opt/status-page/venv/bin/python3 /opt/status-page/venv/bin/gunicorn > \u251c\u25001579 /opt/status-page/venv/bin/python3 /opt/status-page/venv/bin/gunicorn > \u251c\u25001584 /opt/status-page/venv/bin/python3 /opt/status-page/venv/bin/gunicorn > ... Note If the Status-Page service fails to start, issue the command journalctl -eu status-page to check for log messages that may indicate the problem. Once you've verified that the WSGI workers are up and running, move on to HTTP server setup.","title":"4. Gunicorn"},{"location":"installation/4-gunicorn/#gunicorn","text":"Like most Django applications, Status-Page runs as a WSGI application behind an HTTP server. This documentation shows how to install and configure gunicorn (which is automatically installed with Status-Page) for this role, however other WSGI servers are available and should work similarly well.","title":"Gunicorn"},{"location":"installation/4-gunicorn/#configuration","text":"Status-Page ships with a default configuration file for gunicorn. To use it, copy /opt/status-page/contrib/gunicorn.py to /opt/status-page/gunicorn.py . (We make a copy of this file rather than pointing to it directly to ensure that any local changes to it do not get overwritten by a future upgrade.) sudo cp /opt/status-page/contrib/gunicorn.py /opt/status-page/gunicorn.py While the provided configuration should suffice for most initial installations, you may wish to edit this file to change the bound IP address and/or port number, or to make performance-related adjustments. See the Gunicorn documentation for the available configuration parameters.","title":"Configuration"},{"location":"installation/4-gunicorn/#systemd-setup","text":"We'll use systemd to control gunicorn, Status-Page's background worker scheduler and Status-Page's background worker process. First, copy contrib/status-page.service , contrib/status-page-scheduler.service and contrib/status-page-rq.service to the /etc/systemd/system/ directory and reload the systemd daemon: sudo cp -v /opt/status-page/contrib/*.service /etc/systemd/system/ sudo systemctl daemon-reload Then, start the status-page , status-page-scheduler and status-page-rq services and enable them to initiate at boot time: sudo systemctl start status-page status-page-scheduler status-page-rq sudo systemctl enable status-page status-page-scheduler status-page-rq You can use the command systemctl status status-page to verify that the WSGI service is running: systemctl status status-page.service You should see output similar to the following: \u25cf status-page.service - Status-Page WSGI Service Loaded: loaded (/etc/systemd/system/status-page.service; enabled; vendor preset: enabled) Active: active (running) since Mon 2022-10-30 17:54:22 UTC; 14h ago Docs: https://docs.status-page.dev/ Main PID: 1573 (gunicorn) Tasks: 19 (limit: 4683) Memory: 666.2M CGroup: /system.slice/status-page.service \u251c\u25001573 /opt/status-page/venv/bin/python3 /opt/status-page/venv/bin/gunicorn > \u251c\u25001579 /opt/status-page/venv/bin/python3 /opt/status-page/venv/bin/gunicorn > \u251c\u25001584 /opt/status-page/venv/bin/python3 /opt/status-page/venv/bin/gunicorn > ... Note If the Status-Page service fails to start, issue the command journalctl -eu status-page to check for log messages that may indicate the problem. Once you've verified that the WSGI workers are up and running, move on to HTTP server setup.","title":"systemd Setup"},{"location":"installation/5-http-server/","text":"HTTP Server Setup This documentation provides example configurations for both nginx and Apache , though any HTTP server which supports WSGI should be compatible. Info For the sake of brevity, only Ubuntu 20.04 instructions are provided here. These tasks are not unique to Status-Page and should carry over to other distributions with minimal changes. Please consult your distribution's documentation for assistance if needed. Obtain an SSL Certificate To enable HTTPS access to Status-Page, you'll need a valid SSL certificate. You can purchase one from a trusted commercial provider or obtain one for free from Let's Encrypt . Both the public certificate and private key files need to be installed on your Status-Page server in a location that is readable by the status-page user. The command below can be used to generate a self-signed certificate for testing purposes, however it is strongly recommended to use a certificate from a trusted authority in production. Two files will be created: the public certificate ( status-page.crt ) and the private key ( status-page.key ). The certificate is published to the world, whereas the private key must be kept secret at all times. sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\ -keyout /etc/ssl/private/status-page.key \\ -out /etc/ssl/certs/status-page.crt The above command will prompt you for additional details of the certificate; all of these are optional. HTTP Server Installation Option A: nginx Begin by installing nginx: sudo apt install -y nginx Once nginx is installed, copy the nginx configuration file provided by Status-Page to /etc/nginx/sites-available/status-page.conf . Be sure to replace status-page.example.com with the domain name or IP address of your installation. (This should match the value configured for ALLOWED_HOSTS in configuration.py .) sudo cp /opt/status-page/contrib/nginx.conf /etc/nginx/sites-available/status-page.conf Then, delete /etc/nginx/sites-enabled/default and create a symlink in the sites-enabled directory to the configuration file you just created. sudo rm /etc/nginx/sites-enabled/default sudo ln -s /etc/nginx/sites-available/status-page.conf /etc/nginx/sites-enabled/status-page.conf Finally, restart the nginx service to use the new configuration. sudo systemctl restart nginx Option B: Apache Begin by installing Apache: sudo apt install -y apache2 Next, copy the default configuration file to /etc/apache2/sites-available/ . Be sure to modify the ServerName parameter appropriately. sudo cp /opt/status-page/contrib/apache.conf /etc/apache2/sites-available/status-page.conf Finally, ensure that the required Apache modules are enabled, enable the status-page site, and reload Apache: sudo a2enmod ssl proxy proxy_http headers sudo a2ensite status-page sudo systemctl restart apache2 Confirm Connectivity At this point, you should be able to connect to the HTTPS service at the server name or IP address you provided. Info Please keep in mind that the configurations provided here are bare minimums required to get Status-Page up and running. You may want to make adjustments to better suit your production environment. Warning Certain components of Status-Page (such as the display of rack elevation diagrams) rely on the use of embedded objects. Ensure that your HTTP server configuration does not override the X-Frame-Options response header set by Status-Page. Troubleshooting If you are unable to connect to the HTTP server, check that: Nginx/Apache is running and configured to listen on the correct port. Access is not being blocked by a firewall somewhere along the path. (Try connecting locally from the server itself.) If you are able to connect but receive a 502 (bad gateway) error, check the following: The WSGI worker processes (gunicorn) are running ( systemctl status status-page should show a status of \"active (running)\") Nginx/Apache is configured to connect to the port on which gunicorn is listening (default is 8001). SELinux is not preventing the reverse proxy connection. You may need to allow HTTP network connections with the command setsebool -P httpd_can_network_connect 1","title":"5. HTTP Server"},{"location":"installation/5-http-server/#http-server-setup","text":"This documentation provides example configurations for both nginx and Apache , though any HTTP server which supports WSGI should be compatible. Info For the sake of brevity, only Ubuntu 20.04 instructions are provided here. These tasks are not unique to Status-Page and should carry over to other distributions with minimal changes. Please consult your distribution's documentation for assistance if needed.","title":"HTTP Server Setup"},{"location":"installation/5-http-server/#obtain-an-ssl-certificate","text":"To enable HTTPS access to Status-Page, you'll need a valid SSL certificate. You can purchase one from a trusted commercial provider or obtain one for free from Let's Encrypt . Both the public certificate and private key files need to be installed on your Status-Page server in a location that is readable by the status-page user. The command below can be used to generate a self-signed certificate for testing purposes, however it is strongly recommended to use a certificate from a trusted authority in production. Two files will be created: the public certificate ( status-page.crt ) and the private key ( status-page.key ). The certificate is published to the world, whereas the private key must be kept secret at all times. sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\ -keyout /etc/ssl/private/status-page.key \\ -out /etc/ssl/certs/status-page.crt The above command will prompt you for additional details of the certificate; all of these are optional.","title":"Obtain an SSL Certificate"},{"location":"installation/5-http-server/#http-server-installation","text":"","title":"HTTP Server Installation"},{"location":"installation/5-http-server/#option-a-nginx","text":"Begin by installing nginx: sudo apt install -y nginx Once nginx is installed, copy the nginx configuration file provided by Status-Page to /etc/nginx/sites-available/status-page.conf . Be sure to replace status-page.example.com with the domain name or IP address of your installation. (This should match the value configured for ALLOWED_HOSTS in configuration.py .) sudo cp /opt/status-page/contrib/nginx.conf /etc/nginx/sites-available/status-page.conf Then, delete /etc/nginx/sites-enabled/default and create a symlink in the sites-enabled directory to the configuration file you just created. sudo rm /etc/nginx/sites-enabled/default sudo ln -s /etc/nginx/sites-available/status-page.conf /etc/nginx/sites-enabled/status-page.conf Finally, restart the nginx service to use the new configuration. sudo systemctl restart nginx","title":"Option A: nginx"},{"location":"installation/5-http-server/#option-b-apache","text":"Begin by installing Apache: sudo apt install -y apache2 Next, copy the default configuration file to /etc/apache2/sites-available/ . Be sure to modify the ServerName parameter appropriately. sudo cp /opt/status-page/contrib/apache.conf /etc/apache2/sites-available/status-page.conf Finally, ensure that the required Apache modules are enabled, enable the status-page site, and reload Apache: sudo a2enmod ssl proxy proxy_http headers sudo a2ensite status-page sudo systemctl restart apache2","title":"Option B: Apache"},{"location":"installation/5-http-server/#confirm-connectivity","text":"At this point, you should be able to connect to the HTTPS service at the server name or IP address you provided. Info Please keep in mind that the configurations provided here are bare minimums required to get Status-Page up and running. You may want to make adjustments to better suit your production environment. Warning Certain components of Status-Page (such as the display of rack elevation diagrams) rely on the use of embedded objects. Ensure that your HTTP server configuration does not override the X-Frame-Options response header set by Status-Page.","title":"Confirm Connectivity"},{"location":"installation/5-http-server/#troubleshooting","text":"If you are unable to connect to the HTTP server, check that: Nginx/Apache is running and configured to listen on the correct port. Access is not being blocked by a firewall somewhere along the path. (Try connecting locally from the server itself.) If you are able to connect but receive a 502 (bad gateway) error, check the following: The WSGI worker processes (gunicorn) are running ( systemctl status status-page should show a status of \"active (running)\") Nginx/Apache is configured to connect to the port on which gunicorn is listening (default is 8001). SELinux is not preventing the reverse proxy connection. You may need to allow HTTP network connections with the command setsebool -P httpd_can_network_connect 1","title":"Troubleshooting"},{"location":"installation/upgrading/","text":"Upgrading Upgrading Status-Page is pretty simple, however users are cautioned to always review the release notes and save a backup of their current deployment prior to beginning an upgrade. You can generally upgrade directly to any newer release with no interim steps, with the one exception being incrementing major versions. This can be done only from the most recent minor release of the major version. Perform a Backup Always be sure to save a backup of your current Status-Page deployment prior to starting the upgrade process. 1. Review the Release Notes Prior to upgrading your Status-Page instance, be sure to carefully review all release notes that have been published since your current version was released. Although the upgrade process typically does not involve additional work, certain releases may introduce breaking or backward-incompatible changes. These are called out in the release notes under the release in which the change went into effect. 2. Update Dependencies to Required Versions Status-Page v2.0 and later require the following: Dependency Minimum Version Python 3.10 PostgreSQL 10 Redis 4.0 3. Install the Latest Release You can upgrade Status-Page by checking out the latest tag of the git repository. This guide assumes that Status-Page is installed at /opt/status-page . Pull down the most recent iteration of the master branch: cd /opt/status-page sudo git fetch sudo git checkout $(git describe --tags `git rev-list --tags --max-count=1`) Checking out a specific release To check out a specific release , use the git checkout command with the desired release tag. For example, git checkout v2.0.0 . 4. Run the Upgrade Script Once the new code is in place, verify that any optional Python packages required by your deployment are listed in local_requirements.txt . Then, run the upgrade script: sudo ./upgrade.sh Warning If the default version of Python is not at least 3.10, you'll need to pass the path to a supported Python version as an environment variable when calling the upgrade script. For example: sudo PYTHON=/usr/bin/python3.10 ./upgrade.sh This script performs the following actions: Destroys and rebuilds the Python virtual environment Installs all required Python packages (listed in requirements.txt ) Installs any additional packages from local_requirements.txt Applies any database migrations that were included in the release Builds the documentation locally (for offline use) Collects all static files to be served by the HTTP service Deletes stale content types from the database Deletes all expired user sessions from the database Note If the upgrade script prompts a warning about unreflected database migrations, this indicates that some change has been made to your local codebase and should be investigated. Never attempt to create new migrations unless you are intentionally modifying the database schema. 5. Restart the Status-Page Services Finally, restart the gunicorn and RQ services: sudo systemctl restart status-page status-page-scheduler status-page-rq","title":"Upgrading Status-Page"},{"location":"installation/upgrading/#upgrading","text":"Upgrading Status-Page is pretty simple, however users are cautioned to always review the release notes and save a backup of their current deployment prior to beginning an upgrade. You can generally upgrade directly to any newer release with no interim steps, with the one exception being incrementing major versions. This can be done only from the most recent minor release of the major version. Perform a Backup Always be sure to save a backup of your current Status-Page deployment prior to starting the upgrade process.","title":"Upgrading"},{"location":"installation/upgrading/#1-review-the-release-notes","text":"Prior to upgrading your Status-Page instance, be sure to carefully review all release notes that have been published since your current version was released. Although the upgrade process typically does not involve additional work, certain releases may introduce breaking or backward-incompatible changes. These are called out in the release notes under the release in which the change went into effect.","title":"1. Review the Release Notes"},{"location":"installation/upgrading/#2-update-dependencies-to-required-versions","text":"Status-Page v2.0 and later require the following: Dependency Minimum Version Python 3.10 PostgreSQL 10 Redis 4.0","title":"2. Update Dependencies to Required Versions"},{"location":"installation/upgrading/#3-install-the-latest-release","text":"You can upgrade Status-Page by checking out the latest tag of the git repository. This guide assumes that Status-Page is installed at /opt/status-page . Pull down the most recent iteration of the master branch: cd /opt/status-page sudo git fetch sudo git checkout $(git describe --tags `git rev-list --tags --max-count=1`) Checking out a specific release To check out a specific release , use the git checkout command with the desired release tag. For example, git checkout v2.0.0 .","title":"3. Install the Latest Release"},{"location":"installation/upgrading/#4-run-the-upgrade-script","text":"Once the new code is in place, verify that any optional Python packages required by your deployment are listed in local_requirements.txt . Then, run the upgrade script: sudo ./upgrade.sh Warning If the default version of Python is not at least 3.10, you'll need to pass the path to a supported Python version as an environment variable when calling the upgrade script. For example: sudo PYTHON=/usr/bin/python3.10 ./upgrade.sh This script performs the following actions: Destroys and rebuilds the Python virtual environment Installs all required Python packages (listed in requirements.txt ) Installs any additional packages from local_requirements.txt Applies any database migrations that were included in the release Builds the documentation locally (for offline use) Collects all static files to be served by the HTTP service Deletes stale content types from the database Deletes all expired user sessions from the database Note If the upgrade script prompts a warning about unreflected database migrations, this indicates that some change has been made to your local codebase and should be investigated. Never attempt to create new migrations unless you are intentionally modifying the database schema.","title":"4. Run the Upgrade Script"},{"location":"installation/upgrading/#5-restart-the-status-page-services","text":"Finally, restart the gunicorn and RQ services: sudo systemctl restart status-page status-page-scheduler status-page-rq","title":"5. Restart the Status-Page Services"},{"location":"release-notes/","text":"Release Notes Our Releases are following the semver specification: v 1 . 0 . 0 ^ ^ ^ | | | | | Patch (Bug fixes) | | | Minor (No breaking changes to the Software, e.g. adding new features) | Major (Breaking changes to the Software) This page contains a history of all major and minor releases since v2.0.0. For more detail on a specific patch release, please see the release notes page for that specific minor release. Version 2.0 (November 2022) Rewrite of Status-Page in python, with django Add Missing Template parts from Dynamic Config Fix Database Settings Fix Settings Set Python requirement to 3.10 Fix Default files and requirements Fix Assets Make Component Group collapse choices actually work Make Metric collapse choices actually work Make Component Links and Descriptions work Add missing Plugin Views Fix select Styles Add missing E-Mail Templates for Notifications Add missing Media folder Fix redis connection within collectstatic command Incident Update edit text box Increase Incident and Maintenance Update Text Length","title":"Overview"},{"location":"release-notes/#release-notes","text":"Our Releases are following the semver specification: v 1 . 0 . 0 ^ ^ ^ | | | | | Patch (Bug fixes) | | | Minor (No breaking changes to the Software, e.g. adding new features) | Major (Breaking changes to the Software) This page contains a history of all major and minor releases since v2.0.0. For more detail on a specific patch release, please see the release notes page for that specific minor release.","title":"Release Notes"},{"location":"release-notes/#version-20-november-2022","text":"Rewrite of Status-Page in python, with django Add Missing Template parts from Dynamic Config Fix Database Settings Fix Settings Set Python requirement to 3.10 Fix Default files and requirements Fix Assets Make Component Group collapse choices actually work Make Metric collapse choices actually work Make Component Links and Descriptions work Add missing Plugin Views Fix select Styles Add missing E-Mail Templates for Notifications Add missing Media folder Fix redis connection within collectstatic command Incident Update edit text box Increase Incident and Maintenance Update Text Length","title":"Version 2.0 (November 2022)"},{"location":"release-notes/version-2.0/","text":"Status-Page v2.0 v2.0.17 (FUTURE) v2.0.16 (2022-12-19) Increase Incident and Maintenance Update Text Length v2.0.15 (2022-12-06) Bug fixes Incident Update edit text box v2.0.14 (2022-11-12) Bug fixes Fix redis connection within collectstatic command v2.0.13 (2022-11-12) Bug fixes Fix redis connection within collectstatic command v2.0.12 (2022-11-12) Bug fixes Add missing Media folder v2.0.11 (2022-11-04) Bug fixes Add missing E-Mail Templates for Notifications v2.0.10 (2022-11-04) Bug fixes Fix select Styles v2.0.9 (2022-11-04) Bug fixes Add missing Plugin Views v2.0.8 (2022-11-04) Bug fixes Make Component Group collapse choices actually work Make Metric collapse choices actually work Make Component Links and Descriptions work v2.0.7 (2022-11-04) Bug fixes Fix Assets v2.0.6 (2022-11-03) Bug fixes Fix Default files and requirements v2.0.5 (2022-11-03) Bug fixes Set Python requirement to 3.10 v2.0.4 (2022-11-03) Bug fixes Fix Database Settings v2.0.3 (2022-11-03) Bug fixes Fix Settings v2.0.2 (2022-11-03) Bug fixes Fix Database Settings v2.0.1 (2022-11-03) Enhancements Add Missing Template parts from Dynamic Config v2.0.0 (2022-11-03) Enhancements Rewrite of Status-Page in python, with django","title":"Version 2.0"},{"location":"release-notes/version-2.0/#status-page-v20","text":"","title":"Status-Page v2.0"},{"location":"release-notes/version-2.0/#v2017-future","text":"","title":"v2.0.17 (FUTURE)"},{"location":"release-notes/version-2.0/#v2016-2022-12-19","text":"Increase Incident and Maintenance Update Text Length","title":"v2.0.16 (2022-12-19)"},{"location":"release-notes/version-2.0/#v2015-2022-12-06","text":"","title":"v2.0.15 (2022-12-06)"},{"location":"release-notes/version-2.0/#bug-fixes","text":"Incident Update edit text box","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v2014-2022-11-12","text":"","title":"v2.0.14 (2022-11-12)"},{"location":"release-notes/version-2.0/#bug-fixes_1","text":"Fix redis connection within collectstatic command","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v2013-2022-11-12","text":"","title":"v2.0.13 (2022-11-12)"},{"location":"release-notes/version-2.0/#bug-fixes_2","text":"Fix redis connection within collectstatic command","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v2012-2022-11-12","text":"","title":"v2.0.12 (2022-11-12)"},{"location":"release-notes/version-2.0/#bug-fixes_3","text":"Add missing Media folder","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v2011-2022-11-04","text":"","title":"v2.0.11 (2022-11-04)"},{"location":"release-notes/version-2.0/#bug-fixes_4","text":"Add missing E-Mail Templates for Notifications","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v2010-2022-11-04","text":"","title":"v2.0.10 (2022-11-04)"},{"location":"release-notes/version-2.0/#bug-fixes_5","text":"Fix select Styles","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v209-2022-11-04","text":"","title":"v2.0.9 (2022-11-04)"},{"location":"release-notes/version-2.0/#bug-fixes_6","text":"Add missing Plugin Views","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v208-2022-11-04","text":"","title":"v2.0.8 (2022-11-04)"},{"location":"release-notes/version-2.0/#bug-fixes_7","text":"Make Component Group collapse choices actually work Make Metric collapse choices actually work Make Component Links and Descriptions work","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v207-2022-11-04","text":"","title":"v2.0.7 (2022-11-04)"},{"location":"release-notes/version-2.0/#bug-fixes_8","text":"Fix Assets","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v206-2022-11-03","text":"","title":"v2.0.6 (2022-11-03)"},{"location":"release-notes/version-2.0/#bug-fixes_9","text":"Fix Default files and requirements","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v205-2022-11-03","text":"","title":"v2.0.5 (2022-11-03)"},{"location":"release-notes/version-2.0/#bug-fixes_10","text":"Set Python requirement to 3.10","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v204-2022-11-03","text":"","title":"v2.0.4 (2022-11-03)"},{"location":"release-notes/version-2.0/#bug-fixes_11","text":"Fix Database Settings","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v203-2022-11-03","text":"","title":"v2.0.3 (2022-11-03)"},{"location":"release-notes/version-2.0/#bug-fixes_12","text":"Fix Settings","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v202-2022-11-03","text":"","title":"v2.0.2 (2022-11-03)"},{"location":"release-notes/version-2.0/#bug-fixes_13","text":"Fix Database Settings","title":"Bug fixes"},{"location":"release-notes/version-2.0/#v201-2022-11-03","text":"","title":"v2.0.1 (2022-11-03)"},{"location":"release-notes/version-2.0/#enhancements","text":"Add Missing Template parts from Dynamic Config","title":"Enhancements"},{"location":"release-notes/version-2.0/#v200-2022-11-03","text":"","title":"v2.0.0 (2022-11-03)"},{"location":"release-notes/version-2.0/#enhancements_1","text":"Rewrite of Status-Page in python, with django","title":"Enhancements"}]}